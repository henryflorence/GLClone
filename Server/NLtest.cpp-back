#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nl.h"
#include "glut.h"
#include <gl/glu.h>

#if defined WIN32 || defined WIN64
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#define sleep(x)    Sleep(1000 * (x))
#endif

#define readNoSwapFloat(x, y, z)      {z = *(NLfloat  *)((NLbyte *)&x[y]); y += 4;}

void parseFunctions();
char *GLN[] = 
{
	"glAccum",
	"glAlphaFunc",
	"glAreTexturesResident",
	"glArrayElement",
	"glBegin",
	"glBindTexture",
	"glBitmap",
	"glBlendFunc",
	"glCallList",
	"glCallLists",
	"glClear",
	"glClearAccum",
	"glClearColor",
	"glClearDepth",
	"glClearIndex",
	"glClearStencil",
	"glClipPlane",
	"glColor3b",
	"glColor3bv",
	"glColor3d",
	"glColor3dv",
	"glColor3f",
	"glColor3fv",
	"glColor3i",
	"glColor3iv",
	"glColor3s",
	"glColor3sv",
	"glColor3ub",
	"glColor3ubv",
	"glColor3ui",
	"glColor3uiv",
	"glColor3us",
	"glColor3usv",
	"glColor4b",
	"glColor4bv",
	"glColor4d",
	"glColor4dv",
	"glColor4f",
	"glColor4fv",
	"glColor4i",
	"glColor4iv",
	"glColor4s",
	"glColor4sv",
	"glColor4ub",
	"glColor4ubv",
	"glColor4ui",
	"glColor4uiv",
	"glColor4us",
	"glColor4usv",
	"glColorMask",
	"glColorMaterial",
	"glColorPointer",
	"glCopyPixels",
	"glCopyTexImage1D",
	"glCopyTexImage2D",
	"glCopyTexSubImage1D",
	"glCopyTexSubImage2D",
	"glCullFace",
	"glDeleteLists",
	"glDeleteTextures",
	"glDepthFunc",
	"glDepthMask",
	"glDepthRange",
	"glDisable",
	"glDisableClientState",
	"glDrawArrays",
	"glDrawBuffer",
	"glDrawElements",
	"glDrawPixels",
	"glEdgeFlag",
	"glEdgeFlagPointer",
	"glEdgeFlagv",
	"glEnable",
	"glEnableClientState",
	"glEnd",
	"glEndList",
	"glEvalCoord1d",
	"glEvalCoord1dv",
	"glEvalCoord1f",
	"glEvalCoord1fv",
	"glEvalCoord2d",
	"glEvalCoord2dv",
	"glEvalCoord2f",
	"glEvalCoord2fv",
	"glEvalMesh1",
	"glEvalMesh2",
	"glEvalPoint1",
	"glEvalPoint2",
	"glFeedbackBuffer",
	"glFinish",
	"glFlush",
	"glFogf",
	"glFogfv",
	"glFogi",
	"glFogiv",
	"glFrontFace",
	"glFrustum",
	"glGenLists",
	"glGenTextures",
	"glGetBooleanv",
	"glGetClipPlane",
	"glGetDoublev",
	"glGetError",
	"glGetFloatv",
	"glGetIntegerv",
	"glGetLightfv",
	"glGetLightiv",
	"glGetMapdv",
	"glGetMapfv",
	"glGetMapiv",
	"glGetMaterialfv",
	"glGetMaterialiv",
	"glGetPixelMapfv",
	"glGetPixelMapuiv",
	"glGetPixelMapusv",
	"glGetPointerv",
	"glGetPolygonStipple",
	"glGetString",
	"glGetTexEnvfv",
	"glGetTexEnviv",
	"glGetTexGendv",
	"glGetTexGenfv",
	"glGetTexGeniv",
	"glGetTexImage",
	"glGetTexLevelParameterfv",
	"glGetTexLevelParameteriv",
	"glGetTexParameterfv",
	"glGetTexParameteriv",
	"glHint",
	"glIndexMask",
	"glIndexPointer",
	"glIndexd",
	"glIndexdv",
	"glIndexf",
	"glIndexfv",
	"glIndexi",
	"glIndexiv",
	"glIndexs",
	"glIndexsv",
	"glIndexub",
	"glIndexubv",
	"glInitNames",
	"glInterleavedArrays",
	"glIsEnabled",
	"glIsList",
	"glIsTexture",
	"glLightModelf",
	"glLightModelfv",
	"glLightModeli",
	"glLightModeliv",
	"glLightf",
	"glLightfv",
	"glLighti",
	"glLightiv",
	"glLineStipple",
	"glLineWidth",
	"glListBase",
	"glLoadIdentity",
	"glLoadMatrixd",
	"glLoadMatrixf",
	"glLoadName",
	"glLogicOp",
	"glMap1d",
	"glMap1f",
	"glMap2d",
	"glMap2f",
	"glMapGrid1d",
	"glMapGrid1f",
	"glMapGrid2d",
	"glMapGrid2f",
	"glMaterialf",
	"glMaterialfv",
	"glMateriali",
	"glMaterialiv",
	"glMatrixMode",
	"glMultMatrixd",
	"glMultMatrixf",
	"glNewList",
	"glNormal3b",
	"glNormal3bv",
	"glNormal3d",
	"glNormal3dv",
	"glNormal3f",
	"glNormal3fv",
	"glNormal3i",
	"glNormal3iv",
	"glNormal3s",
	"glNormal3sv",
	"glNormalPointer",
	"glOrtho",
	"glPassThrough",
	"glPixelMapfv",
	"glPixelMapuiv",
	"glPixelMapusv",
	"glPixelStoref",
	"glPixelStorei",
	"glPixelTransferf",
	"glPixelTransferi",
	"glPixelZoom",
	"glPointSize",
	"glPolygonMode",
	"glPolygonOffset",
	"glPolygonStipple",
	"glPopAttrib",
	"glPopClientAttrib",
	"glPopMatrix",
	"glPopName",
	"glPrioritizeTextures",
	"glPushAttrib",
	"glPushClientAttrib",
	"glPushMatrix",
	"glPushName",
	"glRasterPos2d",
	"glRasterPos2dv",
	"glRasterPos2f",
	"glRasterPos2fv",
	"glRasterPos2i",
	"glRasterPos2iv",
	"glRasterPos2s",
	"glRasterPos2sv",
	"glRasterPos3d",
	"glRasterPos3dv",
	"glRasterPos3f",
	"glRasterPos3fv",
	"glRasterPos3i",
	"glRasterPos3iv",
	"glRasterPos3s",
	"glRasterPos3sv",
	"glRasterPos4d",
	"glRasterPos4dv",
	"glRasterPos4f",
	"glRasterPos4fv",
	"glRasterPos4i",
	"glRasterPos4iv",
	"glRasterPos4s",
	"glRasterPos4sv",
	"glReadBuffer",
	"glReadPixels",
	"glRectd",
	"glRectdv",
	"glRectf",
	"glRectfv",
	"glRecti",
	"glRectiv",
	"glRects",
	"glRectsv",
	"glRenderMode",
	"glRotated",
	"glRotatef",
	"glScaled",
	"glScalef",
	"glScissor",
	"glSelectBuffer",
	"glShadeModel",
	"glStencilFunc",
	"glStencilMask",
	"glStencilOp",
	"glTexCoord1d",
	"glTexCoord1dv",
	"glTexCoord1f",
	"glTexCoord1fv",
	"glTexCoord1i",
	"glTexCoord1iv",
	"glTexCoord1s",
	"glTexCoord1sv",
	"glTexCoord2d",
	"glTexCoord2dv",
	"glTexCoord2f",
	"glTexCoord2fv",
	"glTexCoord2i",
	"glTexCoord2iv",
	"glTexCoord2s",
	"glTexCoord2sv",
	"glTexCoord3d",
	"glTexCoord3dv",
	"glTexCoord3f",
	"glTexCoord3fv",
	"glTexCoord3i",
	"glTexCoord3iv",
	"glTexCoord3s",
	"glTexCoord3sv",
	"glTexCoord4d",
	"glTexCoord4dv",
	"glTexCoord4f",
	"glTexCoord4fv",
	"glTexCoord4i",
	"glTexCoord4iv",
	"glTexCoord4s",
	"glTexCoord4sv",
	"glTexCoordPointer",
	"glTexEnvf",
	"glTexEnvfv",
	"glTexEnvi",
	"glTexEnviv",
	"glTexGend",
	"glTexGendv",
	"glTexGenf",
	"glTexGenfv",
	"glTexGeni",
	"glTexGeniv",
	"glTexImage1D",
	"glTexImage2D",
	"glTexParameterf",
	"glTexParameterfv",
	"glTexParameteri",
	"glTexParameteriv",
	"glTexSubImage1D",
	"glTexSubImage2D",
	"glTranslated",
	"glTranslatef",
	"glVertex2d",
	"glVertex2dv",
	"glVertex2f",
	"glVertex2fv",
	"glVertex2i",
	"glVertex2iv",
	"glVertex2s",
	"glVertex2sv",
	"glVertex3d",
	"glVertex3dv",
	"glVertex3f",
	"glVertex3fv",
	"glVertex3i",
	"glVertex3iv",
	"glVertex3s",
	"glVertex3sv",
	"glVertex4d",
	"glVertex4dv",
	"glVertex4f",
	"glVertex4fv",
	"glVertex4i",
	"glVertex4iv",
	"glVertex4s",
	"glVertex4sv",
	"glVertexPointer",
	"glViewport",
#if defined WIN32 || defined WIN64
	"wglChoosePixelFormat",
	"wglCopyContext",
	"wglCreateContext",
	"wglCreateLayerContext",
	"wglDeleteContext",
	"wglDescribeLayerPlane",
	"wglDescribePixelFormat",
	"wglGetCurrentContext",
	"wglGetCurrentDC",
	"wglGetDefaultProcAddress",
	"wglGetLayerPaletteEntries",
	"wglGetPixelFormat",
	"wglGetProcAddress",
	"wglMakeCurrent",
	"wglRealizeLayerPalette",
	"wglSetLayerPaletteEntries",
	"wglSetPixelFormat",
	"wglShareLists",
	"wglSwapBuffers",
	"wglSwapLayerBuffers",
	"wglUseFontBitmapsA",
	"wglUseFontBitmapsW",
	"wglUseFontOutlinesA",
	"wglUseFontOutlinesW",
#else
    "glXChooseVisual",
    "glXCopyContext",
    "glXCreateContext",
    "glXCreateGLXPixmap",
    "glXDestroyContext",
    "glXDestroyGLXPixmap",
    "glXGetConfig",
    "glXGetCurrentContext",
    "glXGetCurrentDrawable",
    "glXIsDirect",
    "glXMakeCurrent",
    "glXQueryExtension",
    "glXQueryVersion",
    "glXSwapBuffers",
    "glXUseXFont",
    "glXWaitGL",
    "glXWaitX",
    "glXGetClientString",
    "glXQueryServerString",
    "glXQueryExtensionsString",
    "glXGetFBConfigs",
    "glXChooseFBConfig",
    "glXGetFBConfigAttrib",
    "glXGetVisualFromFBConfig",
    "glXCreateWindow",
    "glXDestroyWindow",
    "glXCreatePixmap",
    "glXDestroyPixmap",
    "glXCreatePbuffer",
    "glXDestroyPbuffer",
    "glXQueryDrawable",
    "glXCreateNewContext",
    "glXMakeContextCurrent",
    "glXGetCurrentReadDrawable",
    "glXGetCurrentDisplay",
    "glXQueryContext",
    "glXSelectEvent",
    "glXGetSelectedEvent",
    "glXGetContextIDEXT",
    "glXGetCurrentDrawableEXT",
    "glXImportContextEXT",
    "glXFreeContextEXT",
    "glXQueryContextInfoEXT",
    "glXGetProcAddressARB",
#endif
};

#define MAX_CLIENTS 10
NLsocket    serversock;
NLsocket    client;
NLint       clientnum = 0;
NLbyte		buffer[NL_MAX_PACKET_LENGTH];
bool		data = false;

void printErrorExit(void)
{
    NLenum err = nlGetError();

    if(err == NL_SYSTEM_ERROR)
    {
        printf("System error: %s\n", nlGetSystemErrorStr(nlGetSystemError()));
    }
    else
    {
        printf("HawkNL error: %s\n", nlGetErrorStr(err));
    }
    nlShutdown();
    exit(1);
}

void mainServerLoop()
{
    NLchar      string[NL_MAX_STRING_LENGTH];

    //memset(client, 0, sizeof(client));

    NLint   i;

    /* check for a new client */
    NLsocket newsock = nlAcceptConnection(serversock);

    if(newsock != NL_INVALID)
    {
        NLaddress   addr;

        nlGetRemoteAddr(newsock, &addr);
        client = newsock;
        printf("Client %d connected from %s\n", clientnum, nlAddrToString(&addr, string));
        clientnum++;
    }
    else
    {
        if(nlGetError() == NL_SYSTEM_ERROR)
        {
            printErrorExit();
        }
    }
	/*if (clientnum > 0) {
		NLaddress   addr;
		nlGetRemoteAddr(client[clientnum-1], &addr);
		printf("Client %d still connected from %s\n", clientnum, nlAddrToString(&addr, string));
	}*/

    /* loop through the clients and read the packets */
    if(nlRead(client, buffer, sizeof(buffer)) > 0)
    {
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        buffer[NL_MAX_PACKET_LENGTH-1] = 0; /* null terminate the char string */
		//glutPostRedisplay();
		parseFunctions();
		glutSwapBuffers();
	} //else printf("nothing to read\n");
}
void parseFunctions()
{
	data = false;
	NLushort index;
	NLint count = 0;

	NLulong l;
	NLushort s;
	NLfloat f1, f2, f3, f4;
	NLdouble d1, d2, d3;

	readShort(buffer,count,index);
	while (index != USHRT_MAX && count < NL_MAX_PACKET_LENGTH) {
		printf("%i - %s",index,GLN[index]);
		switch(index) {
			case 4: readShort(buffer,count,s); printf(" %i",s); glBegin(s); break; //glBegin
			case 6: break; //glBitmap
			case 10: readShort(buffer,count,s); printf(" %i",s); break; //glClear
			case 74: glEnd(); break; //glEnd
			case 157: glLoadIdentity(); gluLookAt(0.0, 0.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0); break; //glLoadIdentity
			case 183: readNoSwapFloat(buffer,count,f1); readNoSwapFloat(buffer,count,f2); readNoSwapFloat(buffer,count,f3); printf(" %f %f %f",f1,f2,f3); glNormal3f((GLfloat)f1,(GLfloat)f2,(GLfloat)f3); break; //glNormal3fv
			case 205: glPopMatrix(); break; //glPopMatrix
			case 210: glPushMatrix(); break; //glPushMatrix
			case 248: readNoSwapFloat(buffer,count,f1); readNoSwapFloat(buffer,count,f2); readNoSwapFloat(buffer,count,f3); readNoSwapFloat(buffer,count,f4); printf(" %f %f %f",f1,f2,f3,f4); glRotatef((GLfloat)f1,(GLfloat)f2,(GLfloat)f3,(GLfloat)f4); break; //rotatef
			case 308: readNoSwapFloat(buffer,count,f1); readNoSwapFloat(buffer,count,f2); readNoSwapFloat(buffer,count,f3); printf(" %f %f %f",f1,f2,f3); glTranslatef((GLfloat)f1,(GLfloat)f2,(GLfloat)f3); break; //glTranslated
			case 321: readNoSwapFloat(buffer,count,f1); readNoSwapFloat(buffer,count,f2); readNoSwapFloat(buffer,count,f3); printf(" %f %f %f",f1,f2,f3); glVertex3f((GLfloat)f1,(GLfloat)f2,(GLfloat)f3); break; //glVertex3fv
			case 346: break; //wglGetPixelFormat
			case 354: glutSwapBuffers(); break; //wglSwapBuffers
		}
		printf("\n");
		readShort(buffer,count,index);	
	}
	printf("\n\n");
}
void
init(void)
{
  /* Setup the view of the cube. */
  glMatrixMode(GL_PROJECTION);
  gluPerspective( /* field of view in degree */ 40.0,
	/* aspect ratio */ 1.0,
    /* Z near */ 1.0, /* Z far */ 15.0);

  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();

  gluLookAt(0.0, 0.0, 5.0,  /* eye is at (0,0,5) */
    0.0, 0.0, 0.0,      /* center is at (0,0,0) */
    0.0, 1.0, 0.);      /* up is in positive Y direction */
}
void
display(void)
{
	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	mainServerLoop();
	//glutSwapBuffers();
}
int main(int argc, char **argv)
{
    NLboolean   isserver = NL_FALSE;
    NLsocket    clientsock;
    NLaddress   addr;
    NLenum      type = NL_RELIABLE; /* Change this to NL_RELIABLE for reliable connection */
    NLchar      string[NL_MAX_STRING_LENGTH];

	//strcpy(server, "127.0.0.1:25000");
    if(!nlInit())
        printErrorExit();

    printf("nlGetString(NL_VERSION) = %s\n\n", nlGetString(NL_VERSION));
    printf("nlGetString(NL_NETWORK_TYPES) = %s\n\n", nlGetString(NL_NETWORK_TYPES));

    if(!nlSelectNetwork(NL_IP))
        printErrorExit();

    /* create a server socket */
    serversock = nlOpen(25000, type); /* just a random port number ;) */

    if(serversock == NL_INVALID)
        printErrorExit();

    if(!nlListen(serversock))       /* let's listen on this socket */
    {
        nlClose(serversock);
        printErrorExit();
    }
    nlGetLocalAddr(serversock, &addr);
    printf("Server address is %s\n", nlAddrToString(&addr, string));

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutCreateWindow("Client display");
	glutDisplayFunc(display);
	glutIdleFunc(mainServerLoop);
	init();
	glutMainLoop();

    nlShutdown();
    return 0;
}

